# --- セクション3: 見積書PDFから情報抽出 ---
st.markdown('<div class="section-header">📄 3. 見積書PDFから情報抽出</div>', unsafe_allow_html=True)

st.markdown('<div class="info-box">💡 保険会社からダウンロードした見積書PDFをアップロードし、情報を抽出して比較表に追加します。</div>', unsafe_allow_html=True)

# フォルダ処理のセクションを追加
st.subheader("フォルダ内のPDFファイルを一括処理")
folder_path = st.text_input(
    "PDFファイルが保存されているフォルダのパスを入力",
    placeholder="例: C:/Users/YourName/Documents/PDFs または /home/user/pdfs",
    help="Windows形式 (C:\\Users\\...) でも Linux 形式 (/home/...) でも入力できます"
)

if folder_path:
    if st.button("フォルダ内のPDFを処理", key="process_folder"):
        normalized_path = os.path.normpath(folder_path).replace("\\", "/")
        st.info(f"処理するフォルダ: {normalized_path}")
        
        if os.path.exists(normalized_path):
            if os.path.isdir(normalized_path):
                with st.spinner("フォルダ内のPDFファイルを処理中..."):
                    pdf_files = []
                    # 大文字小文字両方のPDFファイルを検索
                    for ext in ["*.pdf", "*.PDF"]:
                        pdf_files.extend(glob.glob(os.path.join(normalized_path, ext)))
                    
                    if not pdf_files:
                        st.warning(f"フォルダ {normalized_path} にPDFファイルが見つかりませんでした。")
                    else:
                        results = []
                        progress_bar = st.progress(0)
                        for idx, pdf_file in enumerate(pdf_files):
                            try:
                                with open(pdf_file, "rb") as f:
                                    pdf_bytes = f.read()
                                extracted_info_str = extract_insurance_info_with_gemini_vision(pdf_bytes)
                                
                                if isinstance(extracted_info_str, str):
                                    if extracted_info_str.startswith("```json") and extracted_info_str.endswith("```"):
                                        extracted_info_str = extracted_info_str[len("```json\n"):-len("\n```")]
                                    extracted_info = json.loads(extracted_info_str)
                                    results.append(extracted_info)
                                    st.success(f"✅ {os.path.basename(pdf_file)} の処理が完了")
                                
                            except Exception as e:
                                st.error(f"❌ {os.path.basename(pdf_file)} の処理中にエラー: {str(e)}")
                            
                            progress_bar.progress((idx + 1) / len(pdf_files))
                        
                        if results:
                            st.success(f"{len(results)} 件のPDFから情報を抽出しました")
                            # 比較表に追加
                            for result in results:
                                new_quote_data = {
                                    "氏名": result.get("氏名", ""),
                                    "生年月日": result.get("生年月日", ""),
                                    "保険会社名": result.get("保険会社名", ""),
                                    "保険期間": result.get("保険期間", ""),
                                    "保険金額": result.get("保険金額", ""),
                                    "補償内容": result.get("補償内容", "")
                                }
                                st.session_state["comparison_df"] = pd.concat(
                                    [st.session_state["comparison_df"], 
                                     pd.DataFrame([new_quote_data])], 
                                    ignore_index=True
                                )
            else:
                st.error("指定されたパスはフォルダではありません。")
        else:
            st.error("指定されたフォルダが存在しません。正しいパスを入力してください。")

# 既存の複数ファイルアップローダー部分は維持
st.markdown("---")
st.subheader("または PDFファイルを直接アップロード")
# ... 既存のアップローダーコード ...